# Local configuration

# Utilities

function repo {
  cd $REPO_DIR
}

function docs {
  cd $REPO_DIR/docs
}

function tests {
  cd $REPO_DIR/tests
}


function help {
  vim $REPO_DIR/.local/docs/notes.md
}


function todo {
  vim $REPO_DIR/.local/mngt/TODO.md
}


function unload-env {
  export SKIP_LOCAL_ENV=1
  unset LOCAL_ENV_IN_USE
  if [ -n "$PROJ_PREFIX" ]; then
    local vars=($(env | grep -E "^${PROJ_PREFIX}_"))
    unset $vars
  fi
  workon $WRKSPACE
} 


function load-env {
  unset SKIP_LOCAL_ENV
  workon $WRKSPACE
}


function reload-env {
  unload-env &>/dev/null
  load-env &>/dev/null
  info "Local environment in use"
}


function edit-env {
  vim $REPO_DIR/.local/.env
}


function env-check {
  [ -z "$1" ] && env && return 0
  env | grep $1
}


function repo-sudo {
  sudo -E $@
}


function repo-find {
  find $REPO_DIR -type f | xargs grep -n --color $1
}


function llrepo {
  ll $(realpath --relative-to=$REPO_DIR $(cd $1; pwd))
}


function catrepo {
  cat $(realpath --relative-to=$REPO_DIR $(cd $1; pwd))
}


function warn {
  echo -e "$WARN $@$NC"
}


function error {
  echo -e "$ERROR $@$NC"
}


function info {
  echo -e "$INFO $@$NC"
}


function hint {
  echo -e "$HINT $@$NC"
}

# Internal functions

function _prereqs {

  [ ! -d "$REPO_DIR" ] && \
    error "The 'REPO_DIR' directory does not exist" && \
    return 1

  [ -z "$WRKSPACE" ] && \
    error "The 'WRKSPACE' env var is not defined" && \
    return 1

  [ -z $PROJ_PREFIX ] && \
    warn "The 'PROJ_PREFIX' env var is not defined" && \
    info "Project custom env vars will not be unset when env is reloaded"
  
  return 0
}


function _init {

  export RED='\033[1;31m'
  export GREEN='\033[1;32m'
  export SUCCESS="\033[1;93müèÅ\033[0m"
  export WARN="\033[1;93müü†\033[0m"
  export ERROR="\033[40m\033[1;93müî¥\033[0m"
  export HINT="\033[40m\033[1;93müü¢\033[0m"
  export INFO="\033[40m\033[1;93müîµ\033[0m"
  export BOLD="\033[1m"
  export NORMAL="\033[0m"
  export ITALIC="\033[3m"
  export BLINK="\033[5m"
  export NC='\033[0m'

}

function _skip {
  [ -n "$SKIP_LOCAL_ENV" ] && return 0
  return 1
}


function _proj {
  local _f=$REPO_DIR/.proj
  [ -f $_f ] || return 0

  set -a && \
   source $_f && \
  set +a
}

function _main {

  _init

  _skip && 
    warn "Skipping loading of custom env" && \
    hint "Use the load-env command to load env settings" && \
    return 0

  _prereqs || return 0

  [ -z "$LOCAL_ENV_IN_USE" ] && \
    info "Local environment in use" && \
    hint "Use the unload-env command to unload any local env settings"
    export LOCAL_ENV_IN_USE=1

  _proj

}

_main
